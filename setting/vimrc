" All system-wide defaults are set in $VIMRUNTIME/archlinux.vim (usually just
" /usr/share/vim/vimfiles/archlinux.vim) and sourced by the call to :runtime
" you can find below.  If you wish to change any of those settings, you should
" do it in this file (/etc/vimrc), since archlinux.vim will be overwritten
" everytime an upgrade of the vim packages is performed.  It is recommended to
" make changes after sourcing archlinux.vim since it alters the value of the
" 'compatible' option.

" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages.
runtime! archlinux.vim

" If you prefer the old-style vim functionalty, add 'runtime! vimrc_example.vim'
" Or better yet, read /usr/share/vim/vim80/vimrc_example.vim or the vim manual
" and configure vim to your own liking!

" do not load defaults if ~/.vimrc is missing
"let skip_defaults_vim=1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"          SETTING     FOR      PLUGINS                   "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"Normal Settings"
    set nocompatible
	filetype off
    filetype plugin on
    set nu!
    syntax enable
    syntax on
    set list
    set listchars=tab:\|-
    set tabstop=4
    set softtabstop=4
    set shiftwidth=4
    set autoindent shiftwidth=4
	set foldenable
    set nowrap
    set backspace=2
    set t_Co=256
    set showmatch
    set smartcase
    set go-=m
    set encoding=utf-8
    set background=dark
    set ambiwidth=double
    set noshowmode

"setting for leader key"
    let mapleader=','
"setting for marks"
    let showmarks_enable=1
    let showmarks_include="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
    let showmarks_ignore_type="hqm"
    let showmarks_hlline_lower=1
    let showmarks_hlline_upper=1

"setsing for fortran"
    let fortran_fold=1
    let fortran_free_source=1
    let fortran_do_enddo=1
    let fortran_more_precise=1
    let fortran_have_tabs=1

"Setting for Ctags"
    set tags=tags
"Setting for Plug.vim"
call plug#begin('/usr/share/vim/plugged')
    "original repos on github  username/pluginname
    Plug 'scrooloose/nerdtree',{'on':'NERDTreeToggle'}
    Plug 'w0rp/ale'
    Plug 'myusuf3/numbers.vim'
    Plug 'sjl/Gundo.vim',{'on':'GundoToggle'}
    Plug 'SirVer/ultisnips'
    Plug 'honza/vim-snippets'
    Plug 'vim-airline/vim-airline'
    Plug 'Yggdroot/indentLine'
    Plug 'bronson/vim-trailing-whitespace'
    Plug 'Lokaltog/vim-easymotion'
    Plug 'kien/rainbow_parentheses.vim'
    Plug 'kien/ctrlp.vim',{'on':'CtrlpToggle'}
    Plug 'majutsushi/tagbar',{'on':'TagbarToggle'}
    Plug 'mhinz/vim-startify'
    Plug 'morhetz/gruvbox'
    if has('nvim')
       Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
    else
       Plug 'Shougo/deoplete.nvim'
       Plug 'roxma/nvim-yarp'
       Plug 'roxma/vim-hug-neovim-rpc'
endif
"non github ropo  'git://git.wincent.com/pluginname'
"install from harddisk   'file:///path to plugin'

 call plug#end()

"Setting for gruvbox(vim theme)"
    colorscheme gruvbox
"Setting for ale"
    let g:ale_completion_enable=1
    nmap <silent> <C-k> <Plug>(ale_previous_wrap)
    nmap <silent> <C-j> <Plug>(ale_next_wrap)
"Setting for nerdtree"
    map <C-n> :NERDTreeToggle<CR>
    autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif  "close vim when there is only NERDTree

"Setting for neomake
    " When writing a buffer (no delay), and on normal mode changes (afte
    "call neomake#configure#automake('nw', 750)

"Setting for numbers"
    let g:numbers_exclude=['tagbar', 'minibufexpl', 'nerdtree']
    nnoremap <F3> :NumbersToggle<CR>

"Setting for deoplete"
    let g:deoplete#enable_at_startup = 1

"Setting for Gundo"
    nnoremap <f4> :GundoToggle<CR>
    let g:gundo_width = 60
    let g:gundo_preview_height = 40
    let g:gundo_right = 1

"Setting for snippets"

"Setting for airline"
    let laststatus = 1
    let g:airline_powerline_fonts = 1
    let g:airline#extension#tabline#enabled = 1
    let g:airline#extension#tabline#left_sep =  ' '

"Setting for indentLine"
    let g:indentLine_enabled = 1
    let g:indentLine_color_term = 239
    let g:indentLine_char = '|'
    map il :Indeng for trailing-whitespace"ntLinesToggle<CR>"Setting for trailing-whitespace"

"Setting for easymotion"
    let g:EasyMotion_do_mapping = 0
    let g:EasyMotion_smartcase = 1
    map <leader>j <Plug>(easymotion-j)
    map <leader>k <Plug>(easymotion-k)
	map <leader>h <Plug>(easymotion-linebackward)
	map <leader>l <Plug>(easymotion-lineforward)
	map <Leader>w <Plug>(easymotion-w)
	map  / <Plug>(easymotion-sn)
	omap / <Plug>(easymotion-tn)
	map n <Plug>(easymotion-next)
	map N <Plug>(easymotion-prev)

"Setting for rainbow_parentheses"
    let g:rbpt_colorpairs = [
        \ ['brown',       'RoyalBlue3'],
        \ ['Darkblue',    'SeaGreen3'],
        \ ['darkgreen',   'firebrick3'],
        \ ['darkcyan',    'RoyalBlue3'],
        \ ['darkred',     'SeaGreen3'],
        \ ['darkmagenta', 'DarkOrchid3'],
        \ ['brown',       'firebrick3'],
        \ ['gray',        'RoyalBlue3'],
        \ ['black',       'SeaGreen3'],
        \ ['darkmagenta', 'DarkOrchid3'],
        \ ['Darkblue',    'firebrick3'],
        \ ['darkgreen',   'RoyalBlue3'],
        \ ['darkcyan',    'SeaGreen3'],
        \ ['darkred',     'DarkOrchid3'],
        \ ['red',         'firebrick3'],
        \ ]
    let g:rbpt_max=16
    let g:rbpt_loadcmd_toggle=0
    nmap <f10> :RainbowParenthesesToggle<CR>

"Setting for ctrlp"
    let g:ctrlp_map = '<c-p>'
	let g:ctrlp_cmd = 'CtrlP'
	set wildignore+=*/tmp/*,*.so,*.swp,*.zip
    let g:ctrlp_custom_ignore = {
	  \ 'dir':  '\v[\/]\.(git|hg|svn)$',
	  \ 'file': '\v\.(exe|so|dll)$',
	  \ 'link': 'some_bad_symbolic_links',
	  \ }
"Setting for tagbar"
    nmap <f2> :TagbarToggle<CR>
	let g:tagbar_type_objc = {
	    \ 'ctagstype' : 'ObjectiveC',
	    \ 'kinds'     : [
	        \ 'i:interface',
	        \ 'I:implementation',
	        \ 'p:Protocol',
	        \ 'm:Object_method',
	        \ 'c:Class_method',
	        \ 'v:Global_variable',
	        \ 'F:Object field',
	        \ 'f:function',
	        \ 'p:property',
	        \ 't:type_alias',
	        \ 's:type_structure',
	        \ 'e:enumeration',
	        \ 'M:preprocessor_macro',
	    \ ],
	    \ 'sro'        : ' ',
	    \ 'kind2scope' : {
	        \ 'i' : 'interface',
	        \ 'I' : 'implementation',
	        \ 'p' : 'Protocol',
	        \ 's' : 'type_structure',
	        \ 'e' : 'enumeration'
	    \ },
	    \ 'scope2kind' : {
	        \ 'interface'      : 'i',
	        \ 'implementation' : 'I',
	        \ 'Protocol'       : 'p',
	        \ 'type_structure' : 's',
	        \ 'enumeration'    : 'e'
	    \ }
		\ }

" "Setting for Startify"
